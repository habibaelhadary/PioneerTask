@using Application_Layer.Dtos.Employee
@using Newtonsoft.Json
@model GetEmployeeDto

<h2 class="mt-4">Create New Employee</h2>

<form asp-action="Create" method="post">

    <div class="form-group">
        <label for="Code">Code</label>
        <input type="text" asp-for="EmployeeCode" class="form-control" placeholder="Enter employee code" />
        <span asp-validation-for="EmployeeCode" class="text-danger"></span>
    </div>


    <div class="form-group">
        <label for="Name">Name</label>
        <input type="text" asp-for="EmployeeName" class="form-control" placeholder="Enter employee name" />
        <span asp-validation-for="EmployeeName" class="text-danger"></span>
    </div>


    <div class="form-group mt-4">
        <label>Select Properties (Optional)</label>
        <button type="button" id="add-property-btn" class="btn btn-secondary mb-3">Add Property</button>


        <div id="properties-container"></div>
    </div>

    <button type="submit" class="btn btn-primary">Create Employee</button>
</form>

@section Scripts {
    <script>
        let properties = @Html.Raw(JsonConvert.SerializeObject(Model.Properties));

        // console.log(properties);

        let propertyIndex = 0;

        const propertyTypeMapping = {
            0: 'String',
            1: 'Integer',
            2: 'Date',
            3: 'Dropdown'
        };

        document.getElementById("add-property-btn").addEventListener("click", function () {
            addPropertyField();
        });

        function addPropertyField() {
            let propertySelect = document.createElement("select");
            propertySelect.className = "form-control mb-3";
            propertySelect.innerHTML = `<option value="">-- Select a Property --</option>`;

            properties.forEach(property => {
                const propertyTypeName = propertyTypeMapping[property.Type];
                propertySelect.innerHTML += `<option value="${property.Id}" data-type="${property.Type}" data-required="${property.Required}">
                                            ${property.Name} (${propertyTypeName}) ${property.Required ? '*' : ''}
                                        </option>`;
            });

            let container = document.getElementById("properties-container");
            container.appendChild(propertySelect);

            propertySelect.addEventListener("change", function () {
                let selectedPropertyId = this.value;
                let selectedProperty = properties.find(p => p.Id == selectedPropertyId);

                if (selectedProperty) {
                    renderInputForProperty(selectedProperty, this);
                }
            });
        }

        function renderInputForProperty(property, selectElement) {
            let inputContainer = document.createElement("div");
            inputContainer.className = "form-group mb-4";

            const propertyTypeName = propertyTypeMapping[property.Type];

            let label = document.createElement("label");
            label.innerText = `${property.Name} (${propertyTypeName}) ${property.Required ? '*' : ''}`;
            inputContainer.appendChild(label);

            let inputField;

            switch (property.Type) {
                case 0: // String
                    inputField = `<input type="text" name="SelectedProperties[${propertyIndex}].Value" class="form-control" placeholder="Enter value" required="${property.Required}" />`;
                    break;
                case 1: // Integer
                    inputField = `<input type="number" name="SelectedProperties[${propertyIndex}].Value" class="form-control" placeholder="Enter number" required="${property.Required}" />`;
                    break;
                case 2: // Date
                    inputField = `<input type="date" name="SelectedProperties[${propertyIndex}].Value" class="form-control" required="${property.Required}" />`;
                    break;
                case 3: // Dropdown
                    inputField = `<select name="SelectedProperties[${propertyIndex}].Value" class="form-control" required="${property.Required}">
                                              <option value="">Select a value</option>`;
                    property.DropDownValues.forEach(value => {
                        inputField += `<option value="${value.Value}">${value.Value}</option>`;
                    });
                    inputField += `</select>`;
                    break;
            }

            let hiddenInput = `<input type="hidden" name="SelectedProperties[${propertyIndex}].PropId" value="${property.Id}" />`;

            inputContainer.innerHTML += inputField + hiddenInput;

            propertyIndex++;

            selectElement.insertAdjacentElement('afterend', inputContainer);
        }

    </script>

    <!-- jQuery validation scripts -->
    <script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
    <script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>
}
